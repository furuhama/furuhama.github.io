---
layout: post
title: Ruby の eval をちゃんと知る
date: 2018-03-03 15:00:00
tag: [ruby]
---

メタプログラミング(動的なメソッドや変数の生成)には欠かせない
Ruby の `eval` やその周辺について。

きほん

{% highlight ruby %}

eval "p 'hoge'"
# => "hoge"

eval "1 + 2"
# => 3

# eval で渡された引数を式として評価する

{% endhighlight %}

動的なメソッドやインスタンス変数生成

{% highlight ruby %}

class Language
  def initialize(options = {})
    # インスタンス変数を生成
    options.each do |name, value|
      eval "@#{name} = #{value}"
      # attr_reader と同じ(getter を定義)
      eval "def #{name}; @#{name}; end"
    end
  end

  def my_define(options = {})
    # メソッドを生成
    options.each do |name, value|
      eval <<-EOS
        def print_#{name}
          p '#{value}'
        end
      EOS
    end
  end
end

lang = Language.new({haskell: 'functional'})

p lang.haskell
# => "functional"

lang.my_define({ruby: 'object-oriented'})
lang.print_ruby
# => "object-oriented"

{% endhighlight %}

instance_eval と class_eval

{% highlight ruby %}

class Piyo; end

p1 = Piyo.new
p2 = Piyo.new

# ブロックを渡してそれを評価する

p1.instance_eval do
  def say
    p 'piyopiyo'
  end
end

p1.say
# => "piyopiyo"
p2.say
# => NoMethodError

Piyo.class_eval do
  def roar
    p 'ugaaaa'
  end
end

p1.roar
p2.roar
# どちらも => "ugaaaa"

{% endhighlight %}

instance_eval で private method 呼び出し

{% highlight ruby %}

class SecretInfo
  def initialize
    @title = 'very secret'
  end

  private

  def details
    'this is secret, DO NOT USE THIS METHOD!!!'
  end
end

secret = SecretInfo.new

p secret.instance_eval { details }
# => "this is secret, DO NOT USE THIS METHOD!!!"
# private method にアクセスする方法のひとつ

{% endhighlight %}

無名関数との合わせ技

{% highlight ruby %}

def books(prefix)
  lambda{|titles| titles.map {|title| "#{prefix} #{title}" } }
end

# 関数定義
my_book_maker = books "Effective"
# つまりこの時点で my_book_maker は
# lambda{|titles| titles.map {|title| "Effective #{title}" } }
# という Proc オブジェクト

p my_book_maker.call ["C++", "Ruby", "Haskell"]
# => ["Effective C++", "Effective Ruby", "Effective Haskell"]

{% endhighlight %}

Binding オブジェクト

{% highlight ruby %}

def bind_method
  local_var = 'this is local'

  binding
end

eval "p local_var", bind_method
# => "this is local"
# eval の第二引数として Binding オブジェクトを渡すことで
# 第一引数の式の中で ローカル変数が取れるようになる

# ちなみに
p bind_method.class
# => Binding

{% endhighlight %}

Binding オブジェクトでインスタンス変数にアクセスする

{% highlight ruby %}

class Language
  def initialize
    @name = "Haskell"
  end

  def bind
    binding
  end
end

fl = Language.new

eval "p @name", fl.bind
# => "Haskell"
# こんな感じで呼べるようになる

# binding はその文脈を外から再現するような感じっぽい

{% endhighlight %}

--

参考:

- [Rubyのevalメソッドの使い方](http://uxmilk.jp/25938)
- [Ruby における Binding オブジェクトとは](http://uxmilk.jp/33886)
- [Rubyでメタプログラミングことはじめ](https://qiita.com/iguchi1124/items/a2a64f27e6dabbac1301)

