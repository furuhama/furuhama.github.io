---
layout: post
title: TypeScript
date: 2018-11-11 20:45:02
tag: [minipost]
---

JavaScript の経験がほとんどなくて、せっかく今からやるなら TypeScript でしょと思って、これまたドキュメントを眺めていたけど、やっぱり型アノテーションは好きだな。一部には冗長とか美しくないとかいう向きもあるみたいだが、僕はいいと思う。

Rust やってみて思ったけど、型アノテーション(と、静的に解決される型システム)がある方が色々と処理を書きつらねていきやすい気がしている。量や時間で行ったら Ruby の方がよく書いているけど、 Ruby でプロダクションコード書くとなると結局テストで関数の引数と戻り値の値の幅を保証してあげることになる。それだったらテストに分断されることなく、アプリケーション側のソースコードの中に、値の取りうる幅(型だったり nullable かどうかだったり)の情報が含まれている方が読みやすいと思っている。

そもそも値の取りうる幅を全て型システムで決定できるというのは、パズルちっくなコードになりがちではあるが、素晴らしい点だよね。型システムの基本概念になれてしまえば他人の書いたコードも 70% くらいの理解度でもなんとなく読めて安全に扱える。 (Ruby は他人の書いたコードを読むのが非常にコストがかかるし、 90% くらい理解しないと怖いなって思ってしまう。。。)

逆に Ruby がいいのは、クラスベースのオブジェクト志向をベースに体系が構成されているから、論理的な世界での話なのに物理的な世界に対してプログラムを行なっているかのような思考の簡単さ・楽しさを持てる点が一つあると思っている。その上で基本的にいろんな方向に制約なく(しかも処理の流れの中で動的に)メッセージパッシングができるから、あんまり悩まなくても、やってほしい子にやってほしいことをやってもらえる部分もいいところかなって思う。(さらにいえば、そんな自由度の中でいかにお行儀よくわかりやすいコードを書いていくか、という部分も割と好き。)
