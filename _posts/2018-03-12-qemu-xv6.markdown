---
layout: post
title:  "qemuでxv6のエミュレート(環境構築メモ)"
date:   2018-03-12 23:00:00 +0900
tag: [os, qemu, xv6]
---

急に qemu で xv6 動かしてみたくなってしまったので、

どうやったら動いたかをメモする

xv6 は MIT の授業で使われてるっぽいシンプルな OS

詳しくは[講義ページ](https://pdos.csail.mit.edu/6.828/2017/xv6.html)とか見ると良さそう

--

### 僕の環境

- OSX High Sierra 10.13.3

なので elf binary(バイナリの形式の一つ)を使う

x86(Intel の 32-bit CPU アーキテクチャのこと)用にクロスコンパイルするために

toolchain を揃えなきゃいけないみたい

compiler toolchain に関しては講義ページ内の[ここ](https://pdos.csail.mit.edu/6.828/2017/tools.html)に書いてある

そして /usr/local とかにぶち込むので基本的に全部 sudo でやればよさそう

--

### 必要なもの(Homebrewとか自前ビルドとかで)

- gmp, mpfr, mpc あたりのライブラリ(Homebrew 最新版)
- binutils(最新版)
- gcc(4.6.4 指定)
- qemu(最新版)
- gdb(最新版)
  - brew install --with-all-targets gdb
    - ビルドに結構時間かかる

--

### 必要なもののバージョン

- binutils 2.30
- gcc 4.6.4
- qemu 2.11.1
- gdb 8.1

--

### gcc について

- gcc-4.5以前は新しいmakeinfoでエラーが出る
- gcc-4.7以降は配布物が全部入りとなり巨大

とのことで、他のバージョンも色々試したのち 4.6.4 を入れたらうまくいきました

```
tar xjf gcc-core-4.6.4.tar.bz2  # 解凍する
cd gcc-4.6.4  # できた dir の中に入る
mkdir build  # GCC will not compile correctly unless you build in a separate directory
cd build

# Makefile をつくる
sudo ../configure --prefix=/usr/local \
    --target=i386-jos-elf --disable-werror \
    --disable-libssp --disable-libmudflap --with-newlib \
    --without-headers --enable-languages=c

sudo make all-gcc  # いくつか warning とか error は出るが無視した
sudo make install-gcc         # This step may require privilege (sudo make install-gcc)
sudo make all-target-libgcc
sudo make install-target-libgcc     # This step may require privilege (sudo make install-target-libgcc)
cd ../..

i386-jos-elf-gcc -v  # ここで以下のように出れば ok ぽい
# =>
#  組み込み spec を使用しています。
#  COLLECT_GCC=i386-jos-elf-gcc
#  COLLECT_LTO_WRAPPER=/usr/local/libexec/gcc/i386-jos-elf/4.6.4/lto-wrapper
#  ターゲット: i386-jos-elf
#  configure 設定: ../configure --prefix=/usr/local --target=i386-jos-elf --disable-werror --disable-libssp --disable-libmudflap --with-newlib --without-headers --enable-languages=c
#  スレッドモデル: single
#  gcc バージョン 4.6.4 (GCC)
```

というわけでなんとか クロスコンパイル用の gcc toolchain が入った

--

### gdb について

使えるようにするまでなかなか面倒みたい

- .gdbinit ファイル
  - 調べればわかると思います。(参考: [僕の](https://github.com/furuhama/dotfiles/blob/master/.gdbinit))
- システム証明書の発行
  - golang の debugger である delve のための証明書の時もはまったんだけど
  - 証明書アシスタントからシステム証明書を直接作成しようとするとエラーが出てしまうので
  - `一旦ログイン証明書を作ってそれをシステム証明書に移動させて使う` というやり方をしている
- システム証明書の確認
  - codesign -vv `which gdb`
    - /usr/local/bin/gdb: code object is not signed at all
    - In architecture: x86_64
    - とか言われる(証明書が発行されていない状態)
- 作成したシステム証明書を gdb 用に設定する
  - sudo codesign -s gdb-cert /usr/local/bin/gdb
- 再びシステム証明書の確認
  - codesign -vv `which gdb`
    - /usr/local/bin/gdb: valid on disk
    - /usr/local/bin/gdb: satisfies its Designated Requirement
    - と出てたら良さそう
- taskgated を一度 sudo kill する
- これで gdb が使えるはず

### qemu での起動

あとは簡単で xv6-public のソースを [MIT の github](https://github.com/mit-pdos/xv6-public) からもらってきて

`make qemu`

とコマンド叩くだけ

こんな感じで起動する

![start](/images/2018-03-12-qemu-xv6/01_start.png)

### 適当にコマンド叩く

ls コマンド

![ls_in_shell](/images/2018-03-12-qemu-xv6/02_ls_in_shell.png)

起動時に開く qemu のウィンドウから直接叩くことも可能

![ls_in_qemu](/images/2018-03-12-qemu-xv6/03_ls_in_qemu.png)

--

参考:

- [32bit 版 xv6 を Yosemite で動かす](https://attonblog.blogspot.jp/2015/04/32bit-xv6-yosemite.html)
- [Tips for Productive Debugging with GDB](https://metricpanda.com/tips-for-productive-debugging-with-gdb)
- [macOS Sierraでgdbを使う](https://qiita.com/kaityo256/items/d2f7ac7acc42cf2098b2)
- [最低限のクロスコンパイラの作り方](https://qiita.com/7shi/items/2d44e040bae930d11088)
- [gcc-4.6.1の対応アーキテクチャ](http://d.hatena.ne.jp/n7shi/20110722/1311322802)

